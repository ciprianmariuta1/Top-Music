#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <errno.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <netdb.h>
#include <string.h>

/* codul de eroare returnat de anumite apeluri */
extern int errno;

/* portul de conectare la server*/
int port;

char comanda[50], utilizator[20], parola[20], genul[15], titlu[20], artist[20], descriere[100], link_yt[30], com[100];
int id;
int sd;


int conectare () //functie care citeste si trimite parametrii functiei conectare
{
  printf ("[client]Introduceti numele de utilizator: ");
  fflush (stdout);
  scanf("%[^\n]%*c",utilizator);    //se citeste utilizatorul
  if (write (sd,utilizator,strlen(utilizator)+1) <= 0) //se trimite utilizatorul
  {
      perror ("[client]Eroare la write() spre server.\n");
      return errno;
  }
  printf ("[client]Introduceti parola: ");
  fflush (stdout);
  scanf("%[^\n]%*c",parola);    //se citeste parola
  if (write (sd,parola, strlen(parola)+1) <= 0) //se trimite parola
  {
      perror ("[client]Eroare la write() spre server.\n");
      return errno;
  }
}

int inregistrare () //functie care citeste si trimite parametrii functiei inregistrare
{
  printf ("[client]Introduceti numele de utilizator: ");
  fflush (stdout);
  scanf("%[^\n]%*c",utilizator);    //se citeste utilizatorul
  if (write (sd,utilizator,strlen(utilizator)+1) <= 0) //se trimite utilizatorul
  {
      perror ("[client]Eroare la write() spre server.\n");
      return errno;
  }
  printf ("[client]Introduceti o parola: ");
  fflush (stdout); 
  scanf("%[^\n]%*c",parola);    //se citeste parola
  if (write (sd,parola, strlen(parola)+1) <= 0) //se trimite parola
  {
      perror ("[client]Eroare la write() spre server.\n");
      return errno;
  }
  printf ("[client]Reintroduceti parola: ");
  fflush (stdout);
  scanf("%[^\n]%*c",parola);    //se reciteste parola
  if (write (sd,parola, strlen(parola)+1) <= 0) //se retrimite parola
  {
      perror ("[client]Eroare la write() spre server.\n");
      return errno;
  }
}

int top () //functie care citeste si trimite parametrii functiei top
{
  printf ("[client]Alegeti genul muzical: ");
  fflush (stdout);
  scanf("%[^\n]%*c",genul);    //se citeste genul
  if (write (sd,genul, strlen(genul)+1) <= 0) //se trimite genul
  {
      perror ("[client]Eroare la write() spre server.\n");
      return errno;
  }
}

int adauga() //functie care citeste si trimite parametrii functiei adauga
{
  printf ("[client]Introduceti numele melodiei: ");
  fflush (stdout);
  scanf("%[^\n]%*c",titlu);    //se citeste titlul
  if (write (sd,titlu,strlen(titlu)+1) <= 0) //se trimite titlul
  {
      perror ("[client]Eroare la write() spre server.\n");
      return errno;
  }
  printf ("[client]Introduceti numele artistului: ");
  fflush (stdout);
  scanf("%[^\n]%*c",artist);    //se citeste artistul
  if (write (sd,artist, strlen(artist)+1) <= 0) //se trimite artistul
  {
      perror ("[client]Eroare la write() spre server.\n");
      return errno;
  }
  printf ("[client]Introduceti genul muzical: ");
  fflush (stdout);
  scanf("%[^\n]%*c",genul);    //se citeste genul
  if (write (sd,genul, strlen(genul)+1) <= 0) //se trimite genul
  {
      perror ("[client]Eroare la write() spre server.\n");
      return errno;
  }
  printf ("[client]Introduceti o scurta descriere: ");
  fflush (stdout);
  scanf("%[^\n]%*c",descriere);    //se citeste descrierea
  if (write (sd,descriere, strlen(descriere)+1) <= 0) //se trimite descrierea
  {
      perror ("[client]Eroare la write() spre server.\n");
      return errno;
  }
  printf ("[client]Introduceti un link catre melodie: ");
  fflush (stdout);
  scanf("%[^\n]%*c",link_yt);    //se citeste linkul
  if (write (sd,link_yt, strlen(link_yt)+1) <= 0) //se trimite linkul
  {
      perror ("[client]Eroare la write() spre server.\n");
      return errno;
  }
}

int vot () //functie care citeste si trimite parametrii functiei vot
{
  printf ("[client]Introduceti numele melodiei: ");
  fflush (stdout);
  scanf("%[^\n]%*c",titlu);    //se citeste titlul
  if (write (sd,titlu, strlen(titlu)+1) <= 0) //se trimite titlul
  {
      perror ("[client]Eroare la write() spre server.\n");
      return errno;
  }
}

int comentariu () //functie care citeste si trimite parametrii functiei comentariu
{
  printf ("[client]Introduceti numele melodiei: ");
  fflush (stdout);
  scanf("%[^\n]%*c", titlu);    //se citeste titlul
  if (write (sd,titlu, strlen(titlu)+1) <= 0) //se trimite titlul
  {
      perror ("[client]Eroare la write() spre server.\n");
      return errno;
  }
  printf ("[client]Introduceti comentariul: ");
  fflush (stdout);
  scanf("%[^\n]%*c", com);    //se citeste comentariul
  if (write (sd,com, strlen(com)+1) <= 0) //se trimite comentariul
  {
      perror ("[client]Eroare la write() spre server.\n");
      return errno;
  }
}

int vizualizare () //functie care citeste si trimite parametrii functiei vizualizare
{
  printf ("[client]Introduceti numele melodiei: ");
  fflush (stdout);
  scanf("%[^\n]%*c", titlu);    //se citeste titlul
  if (write (sd,titlu, strlen(titlu)+1) <= 0) //se trimite titlul
  {
      perror ("[client]Eroare la write() spre server.\n");
      return errno;
  }
}

int sterge () //functie care citeste si trimite parametrii functiei sterge
{
  printf ("[client]Introduceti numele melodiei: ");
  fflush (stdout);
  scanf("%[^\n]%*c", titlu);    //se citeste titlul
  if (write (sd,titlu, strlen(titlu)+1) <= 0) //se trimite titlul
  {
      perror ("[client]Eroare la write() spre server.\n");
      return errno;
  }
}

int restrictioneaza () //functie care citeste si trimite parametrii functiei restrictioneaza
{
  printf ("[client]Introduceti numele utilizatorului: ");
  fflush (stdout);
  scanf("%[^\n]%*c", utilizator);    //se citeste utilizatorul
  if (write (sd,utilizator, strlen(utilizator)+1) <= 0) //se trimite utilizatorul
  {
      perror ("[client]Eroare la write() spre server.\n");
      return errno;
  }
}




int main (int argc, char *argv[])
{			
  struct sockaddr_in server;	// structura folosita pentru conectare 
  		// mesajul trimis
  char buf[10];

  /* exista toate argumentele in linia de comanda? */
  if (argc != 3)
    {
      printf ("Sintaxa: %s <adresa_server> <port>\n", argv[0]);
      return -1;
    }

  /* stabilim portul */
  port = atoi (argv[2]);

  /* cream socketul */
  if ((sd = socket (AF_INET, SOCK_STREAM, 0)) == -1)
    {
      perror ("Eroare la socket().\n");
      return errno;
    }

  /* umplem structura folosita pentru realizarea conexiunii cu serverul */
  /* familia socket-ului */
  server.sin_family = AF_INET;
  /* adresa IP a serverului */
  server.sin_addr.s_addr = inet_addr(argv[1]);
  /* portul de conectare */
  server.sin_port = htons (port);
  
  /* ne conectam la server */
  if (connect (sd, (struct sockaddr *) &server,sizeof (struct sockaddr)) == -1)
    {
      perror ("[client]Eroare la connect().\n");
      return errno;
    }
  printf("Comenzile acceptate sunt: conectare, inregistrare, vot, adauga, vizualizre, comentariu, sterge, top, restrictioneaza, iesire. Aceste comenzi trebuie introduse cu litere mici. Orice alta comanda nu va fi acceptata.\n\n");
int nr2;
while(1)
{
  /* citirea mesajului */  
    id = -1;
 printf("Introduceti comanda: ");
  fflush (stdout);
  scanf("%[^\n]%*c", comanda);
  
  printf("[client] Am citit: %s\n",comanda);

  /* trimiterea mesajului la server */
  if (write (sd,comanda,strlen(comanda)+1) <= 0)
    {
      perror ("[client]Eroare la write() spre server.\n");
      return errno;
    }
//verificarea comenzii si apelarea functiilor specifice
if(strcmp(comanda,"conectare")==0) conectare();
        else if(strcmp(comanda,"inregistrare")==0) inregistrare();
            else if(strcmp(comanda,"top")==0) top();
                else if(strcmp(comanda,"adauga")==0) adauga();
                    else if(strcmp(comanda,"vot")==0) vot();
                        else if(strcmp(comanda,"comentariu")==0) comentariu();
                            else if(strcmp(comanda,"vizualizare")==0) vizualizare();
                                else if(strcmp(comanda,"sterge")==0) sterge();
                                    else if(strcmp(comanda,"restrictioneaza")==0) restrictioneaza();





char mesaj[300];
  /* citirea raspunsului dat de server 
     (apel blocant pina cind serverul raspunde) */
  if (read (sd, mesaj,300) < 0)
    {
      perror ("[client]Eroare la read() de la server.\n");
      return errno;
    }

  /* afisam mesajul primit */
  printf ("[client]Mesajul primit este: %s\n", mesaj);

	if (strcmp(mesaj,"iesire")==0) //in cazul comenzii iesire se deconecteaza clientul
    {
        printf("Clientul a fost deconectat!\n");
        break;
    }	    
}
  /* inchidem conexiunea, am terminat */
  close (sd);
}
