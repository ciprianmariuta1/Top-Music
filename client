#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <errno.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <netdb.h>
#include <string.h>

/* codul de eroare returnat de anumite apeluri */
extern int errno;

/* portul de conectare la server*/
int port;

char comanda[50];
int id;

int main (int argc, char *argv[])
{
  int sd;			// descriptorul de socket
  struct sockaddr_in server;	// structura folosita pentru conectare 
  		// mesajul trimis
  char buf[10];

  /* exista toate argumentele in linia de comanda? */
  if (argc != 3)
    {
      printf ("Sintaxa: %s <adresa_server> <port>\n", argv[0]);
      return -1;
    }

  /* stabilim portul */
  port = atoi (argv[2]);

  /* cream socketul */
  if ((sd = socket (AF_INET, SOCK_STREAM, 0)) == -1)
    {
      perror ("Eroare la socket().\n");
      return errno;
    }

  /* umplem structura folosita pentru realizarea conexiunii cu serverul */
  /* familia socket-ului */
  server.sin_family = AF_INET;
  /* adresa IP a serverului */
  server.sin_addr.s_addr = inet_addr(argv[1]);
  /* portul de conectare */
  server.sin_port = htons (port);
  
  /* ne conectam la server */
  if (connect (sd, (struct sockaddr *) &server,sizeof (struct sockaddr)) == -1)
    {
      perror ("[client]Eroare la connect().\n");
      return errno;
    }
int nr2;
while(1)
{
  /* citirea mesajului */
  printf ("[client]Introduceti comanda: ");
  fflush (stdout);
  scanf("%s",comanda);
  
    id = -1;

  //read (0, buf, sizeof(buf));
  //nr2=atoi(buf);
  //nr=atoi(buf);
  //scanf("%d",&nr);
  
  printf("[client] Am citit: %s\n",comanda);

if(strcmp(comanda,"conectare")==0) id=1;
        else if(strcmp(comanda,"inregistrare")==0) id=2;
            else if(strcmp(comanda,"top")==0) id=3;
                else if(strcmp(comanda,"adauga")==0) id=4;
                    else if(strcmp(comanda,"vot")==0) id=5;
                        else if(strcmp(comanda,"comentariu")==0) id=6;
                            else if(strcmp(comanda,"vizualizeaza")==0) id=7;
                                else if(strcmp(comanda,"sterge")==0) id=8;
                                    else if(strcmp(comanda,"restrictioneaza")==0) id=9;
                                        else if(strcmp(comanda,"iesire")==0) id=0;


  /* trimiterea mesajului la server */
  if (write (sd,&id,sizeof(int)) <= 0)
    {
      perror ("[client]Eroare la write() spre server.\n");
      return errno;
    }

int mesaj;

  /* citirea raspunsului dat de server 
     (apel blocant pina cind serverul raspunde) */
  if (read (sd, &mesaj,sizeof(int)) < 0)
    {
      perror ("[client]Eroare la read() de la server.\n");
      return errno;
    }

  /* afisam mesajul primit */
  printf ("[client]Mesajul primit este: %d\n", mesaj);

if(mesaj == -1) printf("Comanda invalida!\n");

	if (mesaj==0)
    {
        printf("Clientul a fost deconectat!\n");
        break;
    }	    
}
  /* inchidem conexiunea, am terminat */
  close (sd);
}
