#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <errno.h>
#include <unistd.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <signal.h>
#include <pthread.h>

/* portul folosit */
#define PORT 2908

/* codul de eroare returnat de anumite apeluri */
extern int errno;

typedef struct thData{
	int idThread; //id-ul thread-ului tinut in evidenta de acest program
	int cl; //descriptorul intors de accept
}thData;

static void *treat(void *); /* functia executata de fiecare thread ce realizeaza comunicarea cu clientii */
int raspunde(void *);

int id=-1;
char comanda[15], mesaj[15];

char utilizator[20], parola[20], genul[15], titlu[20], artist[20], descriere[100], link_yt[30], com[100];

void conectare (int descriptor, int thread)
{
    printf("Se apeleaza functia conectare\n");
    if (read (descriptor, utilizator,20) <= 0)
			{
			  printf("[Thread %d]\n",thread);
			  perror ("Eroare la read() de la client.\n");
			
			}
    if (read (descriptor, parola,20) <= 0)
			{
			  printf("[Thread %d]\n",thread);
			  perror ("Eroare la read() de la client.\n");
			
			}
      printf("A fost receptionat numele de utilizator: %s si parola: %s.\n",utilizator, parola);
}

void inregistrare (int descriptor, int thread)
{
    char parola1[20];
    printf("Se apeleaza functia inregistrare\n");
    if (read (descriptor, utilizator,20) <= 0)
			{
			  printf("[Thread %d]\n",thread);
			  perror ("Eroare la read() de la client.\n");
			
			}
    if (read (descriptor, parola,20) <= 0)
			{
			  printf("[Thread %d]\n",thread);
			  perror ("Eroare la read() de la client.\n");
			
			}
    if (read (descriptor, parola1,20) <= 0)
			{
			  printf("[Thread %d]\n",thread);
			  perror ("Eroare la read() de la client.\n");
			
			}
    printf("A fost receptionat numele de utilizator: %s si parola: %s.\n",utilizator, parola);

}

void top (int descriptor, int thread)
{
    printf("Se apeleaza functia top\n");
    if (read (descriptor, genul,15) <= 0)
			{
			  printf("[Thread %d]\n",thread);
			  perror ("Eroare la read() de la client.\n");
			
			}
    printf("A fost receptionat genul muzical dorit: %s\n", genul);
}

void adauga(int descriptor, int thread)
{
    printf("Se apeleaza functia adauga\n");
    if (read (descriptor, titlu,20) <= 0)
			{
			  printf("[Thread %d]\n",thread);
			  perror ("Eroare la read() de la client.\n");
			
			}
    if (read (descriptor, artist,20) <= 0)
			{
			  printf("[Thread %d]\n",thread);
			  perror ("Eroare la read() de la client.\n");
			
			}
    if (read (descriptor, genul,15) <= 0)
			{
			  printf("[Thread %d]\n",thread);
			  perror ("Eroare la read() de la client.\n");
			
			}
    if (read (descriptor, descriere,100) <= 0)
			{
			  printf("[Thread %d]\n",thread);
			  perror ("Eroare la read() de la client.\n");
			
			}
    if (read (descriptor, link_yt,30) <= 0)
			{
			  printf("[Thread %d]\n",thread);
			  perror ("Eroare la read() de la client.\n");
			
			}
    printf("Au fost receptionate datele pentru adaugarea melodiei \"%s\", interpretata de %s, ce face parte din categoria %s. %s. Link: %s\n", titlu, artist, genul, descriere, link_yt);
}

void vot (int descriptor, int thread)
{
    printf("Se apeleaza functia vot\n");
    if (read (descriptor, titlu,20) <= 0)
			{
			  printf("[Thread %d]\n",thread);
			  perror ("Eroare la read() de la client.\n");
			
			}
    printf("A fost receptionat titlul piesei pe care doriti sa o votati: %s\n", titlu);
}

void comentariu (int descriptor, int thread)
{
    printf("Se apeleaza functia comentariu\n");
    if (read (descriptor, titlu,20) <= 0)
			{
			  printf("[Thread %d]\n",thread);
			  perror ("Eroare la read() de la client.\n");
			
			}
    if (read (descriptor, com,100) <= 0)
			{
			  printf("[Thread %d]\n",thread);
			  perror ("Eroare la read() de la client.\n");
			
			}
    printf("A fost receptionat comentariul dumneavoastra pentru melodia \"%s\": %s\n", titlu, com);
}

void vizualizeaza (int descriptor, int thread)
{
    printf("Se apeleaza functia vizualizeaza\n");
    if (read (descriptor, titlu,20) <= 0)
			{
			  printf("[Thread %d]\n",thread);
			  perror ("Eroare la read() de la client.\n");
			
			}
    printf("A fost receptionat titlul melodiei pe care doriti sa o vizualizati: %s\n", titlu);
}

void sterge (int descriptor, int thread)
{
    printf("Se apeleaza functia sterge\n");
    if (read (descriptor, titlu,20) <= 0)
			{
			  printf("[Thread %d]\n",thread);
			  perror ("Eroare la read() de la client.\n");
			
			}
    printf("A fost receptionat titlul melodiei pe care doriti sa o stergeti: %s\n", titlu);
}

void restrictioneaza (int descriptor, int thread)
{
    printf("Se apeleaza functia restrictioneaza\n");
    if (read (descriptor, utilizator,20) <= 0)
			{
			  printf("[Thread %d]\n",thread);
			  perror ("Eroare la read() de la client.\n");
			
			}
    printf("A fost receptionat numele utilizatorului pe care doriti sa il restrictionati: %s\n", utilizator);
}


int main ()
{
  struct sockaddr_in server;	// structura folosita de server
  struct sockaddr_in from;	
  int sd;		//descriptorul de socket 
  int pid;
  pthread_t th[100];    //Identificatorii thread-urilor care se vor crea
	int i=0;
  

  /* crearea unui socket */
  if ((sd = socket (AF_INET, SOCK_STREAM, 0)) == -1)
    {
      perror ("[server]Eroare la socket().\n");
      return errno;
    }
  /* utilizarea optiunii SO_REUSEADDR */
  int on=1;
  setsockopt(sd,SOL_SOCKET,SO_REUSEADDR,&on,sizeof(on));
  
  /* pregatirea structurilor de date */
  bzero (&server, sizeof (server));
  bzero (&from, sizeof (from));
  
  /* umplem structura folosita de server */
  /* stabilirea familiei de socket-uri */
    server.sin_family = AF_INET;	
  /* acceptam orice adresa */
    server.sin_addr.s_addr = htonl (INADDR_ANY);
  /* utilizam un port utilizator */
    server.sin_port = htons (PORT);
  
  /* atasam socketul */
  if (bind (sd, (struct sockaddr *) &server, sizeof (struct sockaddr)) == -1)
    {
      perror ("[server]Eroare la bind().\n");
      return errno;
    }

  /* punem serverul sa asculte daca vin clienti sa se conecteze */
  if (listen (sd, 2) == -1)
    {
      perror ("[server]Eroare la listen().\n");
      return errno;
    }
  /* servim in mod concurent clientii...folosind thread-uri */
  while (1)
    {
      int client;
      thData * td; //parametru functia executata de thread     
      int length = sizeof (from);

      printf ("[server]Asteptam la portul %d...\n",PORT);
      fflush (stdout);

      // client= malloc(sizeof(int));
      /* acceptam un client (stare blocanta pina la realizarea conexiunii) */
  if ( (client = accept (sd, (struct sockaddr *) &from, &length)) < 0)
	{
	  perror ("[server]Eroare la accept().\n");
	  continue;
	}
	
        /* s-a realizat conexiunea, se astepta mesajul */
    
	// int idThread; //id-ul threadului
	// int cl; //descriptorul intors de accept

	td=(struct thData*)malloc(sizeof(struct thData));	
	td->idThread=i++;
	td->cl=client;
	pthread_create(&th[i], NULL, &treat, td);	      
				
	}//while    
};				
static void *treat(void * arg)
{		
	while(1)
	{
		struct thData tdL; 
		tdL= *((struct thData*)arg);	
		printf ("[thread]- %d - Asteptam comanda...\n", tdL.idThread);
		fflush (stdout); 
		if(raspunde((struct thData*)arg)==2)
		{
			pthread_detach(pthread_self());
			printf ("Inchidem conexiunea!\n");
			close ((intptr_t)arg);
			return(NULL);	
		}
  	}
};


int raspunde(void *arg)
{
  int i=0;
	struct thData tdL; 
	tdL= *((struct thData*)arg);
	if (read (tdL.cl, comanda,15) <= 0)
			{
			  printf("[Thread %d]\n",tdL.idThread);
			  perror ("Eroare la read() de la client.\n");
			
			}
	
	printf ("[Thread %d]Comanda a fost receptionata...%s\n",tdL.idThread, comanda);
	
int invalid=0, iesire=0;

  if(strcmp(comanda,"conectare")==0) conectare(tdL.cl,tdL.idThread);
        else if(strcmp(comanda,"inregistrare")==0) inregistrare(tdL.cl,tdL.idThread);
            else if(strcmp(comanda,"top")==0) top(tdL.cl,tdL.idThread);
                else if(strcmp(comanda,"adauga")==0) adauga(tdL.cl,tdL.idThread);
                    else if(strcmp(comanda,"vot")==0) vot(tdL.cl,tdL.idThread);
                        else if(strcmp(comanda,"comentariu")==0) comentariu(tdL.cl,tdL.idThread);
                            else if(strcmp(comanda,"vizualizeaza")==0) vizualizeaza(tdL.cl,tdL.idThread);
                                else if(strcmp(comanda,"sterge")==0) sterge(tdL.cl,tdL.idThread);
                                    else if(strcmp(comanda,"restrictioneaza")==0) restrictioneaza(tdL.cl,tdL.idThread);
                                      else if(strcmp(comanda,"iesire")==0) iesire = 1;
                                        else invalid = 1;
    /*switch (id)
    {
        case 1:
            conectare(tdL.cl, tdL.idThread);
            break;
        case 2:
            inregistrare();
            break;
        case 3:
            top();
            break;
        case 4:
            adauga();
            break;
        case 5:
            vot();
            break;
        case 6:
            comentariu();
            break;
        case 7:
            vizualizeaza();
            break;
        case 8:
            sterge();
            break;
        case 9:
            restrictioneaza();
            break;
    }
  */
  
  strcpy(mesaj, comanda);

    if(invalid == 1) 
    {
      strcpy(mesaj,"invalida");  
      printf("Comanda invalida!\n");
    }
		      /*pregatim mesajul de raspuns */
		      //nr++;      
	printf("[Thread %d]Trimitem mesajul inapoi...%s\n",tdL.idThread, mesaj);
		      
	      /* returnam mesajul clientului */
    fflush (stdout);
	 if (write (tdL.cl, mesaj, strlen(mesaj)+1) <= 0)
		{
		 printf("[Thread %d] ",tdL.idThread);
		 perror ("[Thread]Eroare la write() catre client.\n");
		}
	else
		printf ("[Thread %d]Mesajul a fost trasmis cu succes.\n\n\n",tdL.idThread);
	
	if (iesire==1)
    {
        printf("Clientul %d va fi deconectat!\n", tdL.idThread);
	    return 2;
    }		
else return 1;
}
